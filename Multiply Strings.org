#+TITLE: Multiply Strings
:PROPERTIES:
:ID:       86694454-F931-4D98-B92A-8D0F29F8EC5C
:Title:    Multiply Strings
:Created:  <2025-07-13>
:END:

* Information
  - Name: [Multiply Strings]
  - Link: [https://leetcode.com/problems/multiply-strings/description/]
  - Difficulty: [Medium]
  - Date: <2025-07-13>
  - Problem Type:

* Problem Decription
- Given two non-negative integers ~num1~ and ~num2~ represented as strings,
  return the product of those numbers as string
- Note: Donot use any built-in libraries like BigInteger or convert the inputs
  to integer directly.

#+DOWNLOADED: screenshot @ 2025-07-13 23:05:26
#+attr_html: :width 800px
#+attr_latex: :width 600cm
#+attr_org: :width 100px
[[file:data/multiply_strings_example.png]]


* Approach & Code

** Approach 1

- The primary school method of multiplication by individual digits and shifted
  addition can be used here .
- For this we need to reverse a string.
- We are multiplying  as
#+BEGIN_SRC latex :results output :exports both

    123
     *6
  -----
    738

#+END_SRC
- This individual multiplication can be done as
  - multiply single digit and transfer the carry forward and add that carry
    while multiplying with the second digit.
  - this is handled by maintaining an array for individual digits.
  - so in first iteration ~123*6~ will be
    - ~3*6 = [18,0,0,0,0,0]~ and we need to transfer the carry to forward.
    - This is just copying the value of 10 place to the next element of array
      and add it there as we do in manual multiplication.
    - And the first element should contain only its ones place value.
    - so the final output for this step is ~[8,1,0,0,0,0]~
    - and for ~2*6~ it will be ~[8,3,1,0,0,0]~ as the previous carry ~1~ and the
      product of this time ~12~ is to be added to ~13~ and ones place value ~3~
      is kept in the second place and ~1~ is transferred to the next place.
  - The genius idea is to maintain an array and store the value of intermediate
    products there.
  - The process of addition of each value at last in the manual method is
    ingeniusly handled by adding the previous values of the array element to the
    new product obtained and transfer the carry forward.
  - The final result obtained will be in reversed order with zeros at last.
  - The zeros removed and joining the array in reverse order will give correct
    output.
#+RESULTS:

- Then the second string will be multiplied by individual digits of the reversed
  string and the results will be shifted as per the place of the multiplier
  digit of the reversed string.
  - Here shifting is multiplying by 10 which will shift by a place to the left.
- Then all the individual products will be added to get the final result.

#+BEGIN_SRC python :results output :exports both
  class Solution(object):
      def multiply(self, num1, num2):
          """
          :type num1: str
          :type num2: str
          :rtype: str
          """
          m,n  = len(num1), len(num2)
          num1,num2 = num1[::-1],num2[::-1]
          res = [0]*(m+n)
          if num1 =='0' or num2=='0':
              return'0'
          if m == 0 or n == 0:
              return "0"
          for i in range(n) :
              for j in range(m):
                  res[i+j] += int(num1[j])*int(num2[i])
                  res[i+j+1]  += res[i+j]//10
                  res[i+j] %= 10
                  print(res)
          #remove the leading zeros
          while len(res)> 0 and res[-1] == 0:
              res.pop()
          #reverse and join as string
          out  = ''.join(map(str,res[::-1]))
          return out

  num1 = "123"
  num2 = "456"
  out  = Solution()
  result = out.multiply(num1,num2)
  print(result)
#+END_SRC

#+RESULTS:
#+begin_example
[8, 1, 0, 0, 0, 0]
[8, 3, 1, 0, 0, 0]
[8, 3, 7, 0, 0, 0]
[8, 8, 8, 0, 0, 0]
[8, 8, 8, 1, 0, 0]
[8, 8, 8, 6, 0, 0]
[8, 8, 0, 8, 0, 0]
[8, 8, 0, 6, 1, 0]
[8, 8, 0, 6, 5, 0]
56088
#+end_example

- The above solution works but time limit exceeds for that and this can be
  modified as
#+BEGIN_SRC python :results output :exports both
  class Solution(object):
      def multiply(self, num1, num2):
          if num1 == "0" or num2 == "0":
              return "0"

          m, n = len(num1), len(num2)
          res = [0] * (m + n)

          for i in reversed(range(m)):
              for j in reversed(range(n)):
                  mul = int(num1[i]) * int(num2[j])
                  p1, p2 = i + j, i + j + 1

                  total = mul + res[p2]
                  res[p2] = total % 10
                  res[p1] += total // 10
                  print(res)
          # Skip  zeros
          result = []
          for num in res:
              if not result and num == 0:
                  continue
              result.append(str(num))

          return ''.join(result) if result else "0"
  num1 = "123"
  num2 = "456"
  out  = Solution()
  result = out.multiply(num1,num2)
  print(result)

#+END_SRC

#+RESULTS:
#+begin_example
[0, 0, 0, 0, 1, 8]
[0, 0, 0, 1, 6, 8]
[0, 0, 1, 3, 6, 8]
[0, 0, 1, 4, 8, 8]
[0, 0, 2, 4, 8, 8]
[0, 1, 0, 4, 8, 8]
[0, 1, 1, 0, 8, 8]
[0, 1, 6, 0, 8, 8]
[0, 5, 6, 0, 8, 8]
56088
#+end_example

- The changes are:
  - The trivial operation of ~i+j~ and ~i+j+1~ are handled by ~p1~ and ~p2~ .
  - and storing the intermediate output is stored in the ~total~ which reduces
    the array operations.
  - instead of operating on reversed string, using ~reversed~ function.
*** Problem Complexity
   - Time Complexity: ~O(m*n)~.
     - as the inner loop runs for ~m*n~ times
   - Space Complexity: ~O(m+n)~
     - we need an array of ~m+n~ size to store the intermediate results.


*** Key Takeaway / Learning
- A more faster apporach for multiplication [[https://en.wikipedia.org/wiki/Karatsuba_algorithm][Katatsuba Algorithm]]( references
  only)
- Storing the intermediate products in an array.
  - The product value of individual digits can have at most 2 digits.
  - We carry over the tens place and keep the ones place in the manual method.
  - Using the array to store the ones and carry is a genius method.
